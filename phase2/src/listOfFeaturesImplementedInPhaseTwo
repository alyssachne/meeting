************************************************************************************************************************
*                                             Compulsory Extensions                                                    *
************************************************************************************************************************
1. New Types of Events: The Event class now uses an ArrayList to store speaker information. In the settings of our
 program, this ArrayList can be empty or with any positive length, representing an event with no speaker, one or
 multiple speakers. There is also a String type instance variable called "access", this is the instance we use to
 differentiate regular event from VIP event. The title of the event represents the contents of the event. The duration
 of the event is accommodated with an int type instance variable "duration". The duration in our program is measured in
 hours.
2. Cancelling Event(s): We implemented this method in our use case class of User: "ActFactory", once the user login as
an organizer, he can call this method to cancel existing event(s).
3. More type of users: We implemented admin and VIP user. We didn't explicitly define two subclasses of User since there
 are only a few methods in these class different from those in User. To keep the program structure clear, we decided to
 supported the functionalities of these two users with the existing classes of organizer and User.
4. Organizer: we implemented a createUser() method that the use case class of Organizer can call. Once a real human user
logged in to our program, he will be able to call this method through UI and controller classes. This method allows an
Organizer to create any type of user account.
5. Maximum capacity for an event: We implemented this method by associating the Event class with room class. We stored
an int type variable in event to represent the roomId of the room that the event will be held. Whenever the program
tries to add an attendee to the event. The program will look up for the room by the roomId stored in the event class,
compare the number of existing attendees and the capacity of the room.

************************************************************************************************************************
*                                             Alternative Extensions                                                   *
************************************************************************************************************************
1. Allow the same users to log in and select which conference they want to participate in. This function is supported by
the login and the sign up method.
2.Enhance the user's messaging experience by allowing them to "mark as unread", delete, or archive messages after
reading them.
3.Have the program produce a neatly formatted program or schedule for the conference that users have the option of
"downloading" (outputting it as html, pdf, or similar). Alternatively, if you just want the program to print the
schedule to the screen, then users should be able to request a schedule by at least three of: day, by speaker, by time
(all 3-4 pm talks on all days), or just the ones they have signed up for, or "liked" events (where you have to enable
users to "like" events).
4.Add additional constraints to the scheduling for various types of events (e.g. technology requirements for
presentations, tables vs rows of chairs). When organizers are creating events, they can see a suggested list of rooms
that fit the requirements of their event.
5.Allow the system to support additional user requests (e.g. dietary restrictions, accessibility requirements) where
organizers can tag a request as "pending" or "addressed". All organizers see the same list of requests, so if one tags a
request as addressed, all other organizers can log in and see that.
6.Expand the menus available to organizers to allow them to get useful summary stats about the conference. Include app
traffic statistics, event enrollment statistics, and top-five lists (or something similar). You should include enough
statistics to make this option as complicated as the other ones on this list.